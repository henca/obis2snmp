# Generic host template for all systems support MIB-II host resources
# MIB.  Will take care of storage devices as well, but watch out for
# changes in enumeration caused by inserting USB devices!

# Watch out for lines being wrapped by broken editing software

$head_lines .= "#---------------------------------------------------------------------\n";

my (@meter) = snmpwalk($router_connect,'1.3.6.1.4.1.62368.1.1.1');
my( $metercnt ) = 0;
my( $nummeters ) = $#meter;
foreach my $tmps (@meter) {
  $tmps =~ /(\d+):(\d+)/;
  next if(!$2);
  my($instance,$dummy)=($1,$2);
  my($metername) =
  snmpget($router_connect,'1.3.6.1.4.1.62368.1.1.2.'.$instance);
  my($meterip) =
  snmpget($router_connect,'1.3.6.1.4.1.62368.1.1.3.'.$instance);
  my($metermac) =
  snmpget($router_connect,'1.3.6.1.4.1.62368.1.1.4.'.$instance);
  my($metermultiplier) =
  snmpget($router_connect,'1.3.6.1.4.1.62368.1.1.6.'.$instance);
  my($shortmeter) = $instance;
  $shortmeter = $1 if($metername =~ /^(\w):/);
  $metercnt += 1;
  my (@obisdescr) = snmpwalk($router_connect,'1.3.6.1.4.1.62368.1.1.7');
  my( $obiscnt ) = 0;
  my( $gO );
  my( $tN );
  foreach my $tmpt (@obisdescr) {
    $tmpt =~ /(.+):(.+)/;
    next if(!$2);
    my($obisandinstance,$descr)=($1,$2);
    $obisandinstance =~ /(\d+).(\d+).(\d+).(\d+).(\d+).(\d+)/;
    next if(!$6);
    if($6 == $instance)
    {
      my($noo);
      my($haveout);
      my($unit) = snmpget($router_connect,
                          "1.3.6.1.4.1.62368.1.1.8." . $obisandinstance);
      my($multiplier) = $metermultiplier;
      if(substr($unit,0,1) eq "k")
      {
        substr($unit,0,1)="";
        $multiplier =  $multiplier / 1000;
      }
      elsif(substr($unit,0,1) eq "M")
      {
        substr($unit,0,1)="";
        $multiplier =  $multiplier / 1000000;
      }
      elsif(substr($unit,0,1) eq "m")
      {
        substr($unit,0,1)="";
        $multiplier =  $multiplier * 1000;
      }
      my($factor) = (1.0 / $multiplier);
      $target_lines .= "# " . $descr . " (" . $unit . ") " ."\n";
      my($obislatest) = snmpget($router_connect,
                                "1.3.6.1.4.1.62368.1.1.9." . $obisandinstance);
      my($obismean) = snmpget($router_connect,
                              "1.3.6.1.4.1.62368.1.1.10." . $obisandinstance);
      my($obismax) = snmpget($router_connect,
                              "1.3.6.1.4.1.62368.1.1.11." . $obisandinstance);
      my($obismin) = snmpget($router_connect,
                              "1.3.6.1.4.1.62368.1.1.12." . $obisandinstance);
      if(length($obismax))
      {
        $obiscnt += 1;
        my($target_name)=$router_name.".obis.".$obisandinstance;
        if(length($obismin))
        {
          $noo="";
          $haveout="";
          if($descr =~ m/Instantaneous voltage/)
          {
            $gO=12;
            $tN="min";
          }
          else
          {
            $gO=10;
            $tN="mean";
          }
        }
        else
        {
          $noo="noo,";
          $haveout="routers.cgi*InOut[$target_name]: no";
          $gO=11;
        }
$target_lines .= <<ECHO;
#######################################
# OBIS $metername
Target[$target_name]: 1.3.6.1.4.1.62368.1.1.11.$obisandinstance&1.3.6.1.4.1.62368.1.1.$gO.$obisandinstance:$router_connect 
Factor[$target_name]: $factor
YTicsFactor[$target_name]: $factor
PageTop[$target_name]: <h1>$metername $descr</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
  </TABLE>
Title[$target_name]: $metername $descr
SetEnv[$target_name]: MRTG_INT_DESCR="$metername $descr"
MaxBytes[$target_name]: 100000000
Options[$target_name]: nopercent, gauge, $noo growright
YLegend[$target_name]: $unit
kilo[$target_name]: 1000
ShortLegend[$target_name]: $unit
LegendI[$target_name]: max
LegendO[$target_name]: $tN
Legend1[$target_name]: max (averaged in weekly, monthly and yearly graphs)
Legend2[$target_name]: $tN
Legend3[$target_name]: max
Legend4[$target_name]: bogus maximum $tN value
WithPeak[$target_name]: ymw
# Avoid attention catching magenta for bogus graph, use dark cyan instead
Colours[$target_name]: GREEN#00eb0c,BLUE#1000ff,DARK GREEN#006600,DARK CYAN#008b8b
routers.cgi*Options[$target_name]: nomax, nototal, $noo fixunit
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: $descr
routers.cgi*Description[$target_name]: $descr on $metername
$haveout
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername $descr $noo
ECHO
      }
      elsif(length($obismin))
      {
        $obiscnt += 1;
        my($target_name)=$router_name.".obis.".$obisandinstance;
$target_lines .= <<ECHO;
#######################################
# OBIS $metername
Target[$target_name]: 1.3.6.1.4.1.62368.1.1.12.$obisandinstance&1.3.6.1.4.1.62368.1.1.12.$obisandinstance:$router_connect
Factor[$target_name]: $factor
YTicsFactor[$target_name]: $factor
PageTop[$target_name]: <h1>$metername $descr</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
  </TABLE>
Title[$target_name]: $metername $descr
SetEnv[$target_name]: MRTG_INT_DESCR="$metername $descr"
MaxBytes[$target_name]: 100000000
Options[$target_name]: nopercent, gauge, noo growright
YLegend[$target_name]: $unit
kilo[$target_name]: 1000
ShortLegend[$target_name]: $unit
LegendI[$target_name]: min
Legend1[$target_name]: min
Legend3[$target_name]: min
routers.cgi*Options[$target_name]: nomax, nototal, noo fixunit
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: $descr
routers.cgi*Description[$target_name]: $descr on $metername
routers.cgi*InOut[$target_name]: no
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername $descr noo
ECHO
      }
      elsif(length($obismean))
      {
        $obiscnt += 1;
        my($target_name)=$router_name.".obis.".$obisandinstance;
$target_lines .= <<ECHO;
#######################################
# OBIS $metername
Target[$target_name]: 1.3.6.1.4.1.62368.1.1.10.$obisandinstance&1.3.6.1.4.1.62368.1.1.10.$obisandinstance:$router_connect
Factor[$target_name]: $factor
YTicsFactor[$target_name]: $factor
PageTop[$target_name]: <h1>$metername $descr</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
  </TABLE>
Title[$target_name]: $metername $descr
SetEnv[$target_name]: MRTG_INT_DESCR="$metername $descr"
MaxBytes[$target_name]: 100000000
Options[$target_name]: nopercent, gauge, noo growright
YLegend[$target_name]: $unit
kilo[$target_name]: 1000
ShortLegend[$target_name]: $unit
LegendI[$target_name]: mean
Legend1[$target_name]: mean
Legend3[$target_name]: mean
routers.cgi*Options[$target_name]: nomax, nototal, noo fixunit
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: $descr
routers.cgi*Description[$target_name]: $descr on $metername
routers.cgi*InOut[$target_name]: no
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername $descr noo
ECHO
      }
      elsif(length($obislatest))
      {
        $obiscnt += 1;
        my($target_name)=$router_name.".obis.".$obisandinstance;
$target_lines .= <<ECHO;
#######################################
# OBIS $metername
Target[$target_name]: 1.3.6.1.4.1.62368.1.1.9.$obisandinstance&1.3.6.1.4.1.62368.1.1.9.$obisandinstance:$router_connect
Factor[$target_name]: $factor
YTicsFactor[$target_name]: $factor
PageTop[$target_name]: <h1>$metername $descr</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
  </TABLE>
Title[$target_name]: $metername $descr
SetEnv[$target_name]: MRTG_INT_DESCR="$metername $descr"
MaxBytes[$target_name]: 100000000
Options[$target_name]: nopercent, gauge, noo growright
YLegend[$target_name]: $unit
kilo[$target_name]: 1000
ShortLegend[$target_name]: $unit
LegendI[$target_name]: $unit
Legend1[$target_name]: $unit
Legend3[$target_name]: $unit
routers.cgi*Options[$target_name]: nomax, nototal, noo fixunit
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: $descr
routers.cgi*Description[$target_name]: $descr on $metername
routers.cgi*InOut[$target_name]: no
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername $descr noo
ECHO
      }
    }
  }
  my($target_name)=$router_name.".meterrssi.".$shortmeter;
$target_lines .= <<ECHO;
#######################################
# WiFi RSSI $metername
Target[$target_name]: 1.3.6.1.4.1.62368.1.1.5.$instance&1.3.6.1.4.1.62368.1.1.5.$instance:$router_connect + 100
Factor[$target_name]: 1
YTicsFactor[$target_name]: 1
PageTop[$target_name]: <h1>$metername WiFi RSSI</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
  </TABLE>
Title[$target_name]: $metername WiFi RSSI
SetEnv[$target_name]: MRTG_INT_DESCR="$metername"
MaxBytes[$target_name]: 100
Options[$target_name]: nopercent, gauge, noo, growright
YLegend[$target_name]: RSSI+100
kilo[$target_name]: 1000
ShortLegend[$target_name]: RSSI
LegendI[$target_name]: RSSI
Legend1[$target_name]: RSSI
Legend3[$target_name]: RSSI
routers.cgi*Options[$target_name]: nomax, nototal, fixunit, noo
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: RSSI: $metername
routers.cgi*Description[$target_name]: WiFi RSSI on $metername
routers.cgi*InOut[$target_name]: no
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername "RSSI" noo
ECHO
  if(($obiscnt %2 == 0) && ($metercnt <= $nummeters))
  {
    my($target_name)=$router_name.".filler.".$shortmeter;
$target_lines .= <<ECHO;
#######################################
# Dummy filler to make sure that next meter starts on new row
Target[$target_name]: `echo 0;echo 0;echo 0; echo $router_name`
Factor[$target_name]: 1
YTicsFactor[$target_name]: 1
PageTop[$target_name]: <h1>$metername zero filler</h1>
  <TABLE>
    <TR><TD>Type:</TD><TD>$metername</TD></TR>
    <TR><TD>IP:</TD><TD>$meterip</TD></TR>
    <TR><TD>MAC:</TD><TD>$metermac</TD></TR>
    <TR><TH colspan="2">This filler graph is just to make sure that the next meter start on a new line.</TH></TR>
  </TABLE>
Title[$target_name]: $metername zero filler
SetEnv[$target_name]: MRTG_INT_DESCR="$metername"
MaxBytes[$target_name]: 1
Options[$target_name]: nopercent, gauge, noo, growright
YLegend[$target_name]: zero
kilo[$target_name]: 1000
ShortLegend[$target_name]: zero
LegendI[$target_name]: zero filler
Legend1[$target_name]: zero filler
Legend3[$target_name]: zero filler
routers.cgi*Options[$target_name]: nomax, nototal, fixunit, noo
routers.cgi*Mode[$target_name]: general
routers.cgi*ShortDesc[$target_name]: zero: $metername
routers.cgi*Description[$target_name]: zero filler on $metername
routers.cgi*InOut[$target_name]: no
routers.cgi*InMenu[$target_name]: yes
routers.cgi*InSummary[$target_name]: yes
routers.cgi*InCompact[$target_name]: yes
routers.cgi*Icon[$target_name]: chip-sm.gif
routers.cgi*Graph[$target_name]: $metername "zero filler" noo
ECHO
  }
}
